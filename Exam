CREATE DATABASE Airport_MS
Use Airport_MS
Go

CREATE TABLE Towns (
	TownID INT,
	TownName VARCHAR(30) NOT NULL,
	CONSTRAINT PK_Towns PRIMARY KEY(TownID)
)

CREATE TABLE Airports (
	AirportID INT,
	AirportName VARCHAR(50) NOT NULL,
	TownID INT NOT NULL,
	CONSTRAINT PK_Airports PRIMARY KEY(AirportID),
	CONSTRAINT FK_Airports_Towns FOREIGN KEY(TownID) REFERENCES Towns(TownID)
)

CREATE TABLE Airlines (
	AirlineID INT,
	AirlineName VARCHAR(30) NOT NULL,
	Nationality VARCHAR(30) NOT NULL,
	Rating INT DEFAULT(0),
	CONSTRAINT PK_Airlines PRIMARY KEY(AirlineID)
)

CREATE TABLE Customers (
	CustomerID INT,
	FirstName VARCHAR(20) NOT NULL,
	LastName VARCHAR(20) NOT NULL,
	DateOfBirth DATE NOT NULL,
	Gender VARCHAR(1) NOT NULL CHECK (Gender='M' OR Gender='F'),
	HomeTownID INT NOT NULL,
	CONSTRAINT PK_Customers PRIMARY KEY(CustomerID),
	CONSTRAINT FK_Customers_Towns FOREIGN KEY(HomeTownID) REFERENCES Towns(TownID)
)

INSERT INTO Towns(TownID, TownName)
VALUES
(1, 'Sofia'),
(2, 'Moscow'),
(3, 'Los Angeles'),
(4, 'Athene'),
(5, 'New York')

INSERT INTO Airports(AirportID, AirportName, TownID)
VALUES
(1, 'Sofia International Airport', 1),
(2, 'New York Airport', 5),
(3, 'Royals Airport', 1),
(4, 'Moscow Central Airport', 2)

INSERT INTO Airlines(AirlineID, AirlineName, Nationality, Rating)
VALUES
(1, 'Royal Airline', 'Bulgarian', 200),
(2, 'Russia Airlines', 'Russian', 150),
(3, 'USA Airlines', 'American', 100),
(4, 'Dubai Airlines', 'Arabian', 149),
(5, 'South African Airlines', 'African', 50),
(6, 'Sofia Air', 'Bulgarian', 199),
(7, 'Bad Airlines', 'Bad', 10)

INSERT INTO Customers(CustomerID, FirstName, LastName, DateOfBirth, Gender, HomeTownID)
VALUES
(1, 'Cassidy', 'Isacc', '19971020', 'F', 1),
(2, 'Jonathan', 'Half', '19830322', 'M', 2),
(3, 'Zack', 'Cody', '19890808', 'M', 4),
(4, 'Joseph', 'Priboi', '19500101', 'M', 5),
(5, 'Ivy', 'Indigo', '19931231', 'F', 1)

--Section 1: Data Definition
CREATE TABLE Flights
(
FlightID INT PRIMARY KEY,
DepartureTime DATETIME NOT NULL,
ArrivalTime DATETIME NOT NULL,
[Status] VARCHAR(9),
CHECK([Status] IN ('Departing', 'Delayed', 'Arrived', 'Cancelled')),
OriginAirportID INT,
CONSTRAINT FK_Flights_Airports1 FOREIGN KEY (OriginAirportID) REFERENCES Airports (AirportID),
DestinationAirportID INT,
CONSTRAINT FK_Flights_Airports2 FOREIGN KEY (DestinationAirportID) REFERENCES Airports (AirportID),
AirlineID INT,
CONSTRAINT FK_Flights_Airlines FOREIGN KEY (AirlineID) REFERENCES Airlines (AirlineID)
)

CREATE TABLE Tickets
(
TicketID INT PRIMARY KEY,
Price DECIMAL(8,2) NOT NULL,
Class VARCHAR(6),
CHECK(Class IN ('First', 'Second', 'Third')),
Seat VARCHAR(5) NOT NULL,
CustomerID INT,
CONSTRAINT FK_Tickets_Customers FOREIGN KEY (CustomerID) REFERENCES Customers (CustomerID),
FlightID INT,
CONSTRAINT FK_Tickets_Flights FOREIGN KEY (FlightID) REFERENCES Flights (FlightID)
)

--Section 2: Database Manipulations
--1
INSERT INTO Flights
VALUES
(1,'2016-10-13 06:00 AM','2016-10-13 10:00 AM','Delayed',1,4,1),
(2,'2016-10-12 12:00 PM','2016-10-12 12:01 PM','Departing',1,3,2),
(3,'2016-10-14 03:00 PM','2016-10-20 04:00 AM','Delayed',4,2,4),
(4,'2016-10-12 01:24 PM','2016-10-12 4:31 PM', 'Departing',3,1,3),
(5,'2016-10-12 08:11 AM','2016-10-12 11:22 PM','Departing',4,1,1),
(6,'1995-06-21 12:30 PM','1995-06-22 08:30 PM','Arrived',2,3,5),
(7,'2016-10-12 11:34 PM','2016-10-13 03:00 AM','Departing',2,4,2),
(8,'2016-11-11 01:00 PM','2016-11-12 10:00 PM','Delayed',4,3,1),
(9,'2015-10-01 12:00 PM','2015-12-01 01:00 AM','Arrived',1,2,1),
(10,'2016-10-12 07:30 PM','2016-10-13 12:30 PM','Departing',2,1,7)

INSERT INTO Tickets
VALUES
(1,3000.00,'First','233-A',3,8),
(2,1799.90,'Second','123-D',1,1),
(3,1200.50,'Second','12-Z',2,5),
(4,410.68,'Third','45-Q',2,8),
(5,560.00,'Third','201-R',4,6),
(6,2100.00,'Second','13-T',1,9),
(7,5500.00,'First','98-O',2,7)


--2
UPDATE Flights
SET	AirlineID= 1
	WHERE Status like 'Arrived'
	
--3
 update Tickets
 set Price = Price*1.5
 from Tickets as t
inner join Flights as f
	on t.FlightID=f.FlightID
	inner join Airlines as al
	on al.AirlineID=f.airlineid
	where al.Rating = (select max(Rating) from Airlines)
	
--4
CREATE TABLE CustomerReviews
(
ReviewID INT PRIMARY KEY,
ReviewContent VARCHAR(MAX) NOT NULL,
ReviewGrade INT CHECK(ReviewGrade IN (0,10)),
AirlineID INT,
CustomerID INT,
CONSTRAINT FK_CustomerReviews_Airlines FOREIGN KEY (AirlineID) REFERENCES Airlines (AirlineID),
CONSTRAINT FK_CustomerReviews_Customers FOREIGN KEY (CustomerID) REFERENCES Customers (CustomerID)
)

CREATE TABLE CustomerBankAccounts
(
AccountID INT PRIMARY KEY,
AccountNumber VARCHAR(10) NOT NULL UNIQUE,
Balance DECIMAL(10,2) NOT NULL,
CustomerID INT,
CONSTRAINT FK_CustomerBankAccounts_Customers FOREIGN KEY (CustomerID) REFERENCES Customers (CustomerID)
)

--5
INSERT INTO CustomerReviews
(ReviewID,ReviewContent,ReviewGrade,AirlineID,CustomerID)
VALUES
(1,'Me is very happy. Me likey this airline. Me good.',10,1,1),
(2,'Ja, Ja, Ja... Ja, Gut, Gut, Ja Gut! Sehr Gut!',10,1,4),
(3,'Meh...',5,4,3),
(4,'Well Ive seen better, but Ive certainly seen a lot worse...',7,3,5)

INSERT INTO CustomerBankAccounts
(AccountID,AccountNumber,Balance,CustomerID)
VALUES
(1,'123456790',2569.23,1),
(2,'18ABC23672',14004568.23,2),
(3,'F0RG0100N3',19345.20,5)

--Section 3: Querying

--1
SELECT T.TicketID, T.Price,T.Class, T.Seat FROM Tickets as T
ORDER BY T.TicketID

--2
 SELECT C.CustomerID, CONCAT(C.FirstName, ' ', C.LastName) as "Full Name", C.Gender
 FROM Customers as C
 ORDER BY CONCAT(C.FirstName, ' ', C.LastName) ASC, C.CustomerId ASC
 
 --3
  SELECT f.FlightId, f.DepartureTime, f.ArrivalTime FROM Flights as f
 WHERE [Status] like 'Delayed'
 order by f.FlightId asc
 
 --4
  SELECT top 5 a.AirlineID, a.AirlineName, a.Nationality, a.Rating FROM Airlines as a
 INNER JOIN Flights as f
 ON a.AirlineID=f.AirlineID 
 order by a.AirlineID asc
 
 --5
  SELECT T.TicketID, T.Price, a.AirportName, CONCAT(C.FirstName, ' ', C.LastName) as CustomerName 
 FROM Tickets as T
 INNER JOIN Customers as C
 ON T.CustomerID=C.CustomerID
 INNER JOIN Flights as F 
 on T.FlightID = F.FlightID
 inner join Airports as a
 on F.DestinationAirportID=a.AirportID 
 WHERE t.Price<5000
 AND t.Class like 'First'
 order by t.TicketID asc
 
 --6
  select distinct C.CustomerID,  CONCAT(C.FirstName, ' ', C.LastName) as CustomerName, t.TownName
 from customers as c
 inner join Towns as t
 on c.homeTownID = t.TownID
 inner join Tickets as ti
 on C.CustomerID=ti.CustomerID
 inner join Flights as f
 on ti.FlightID = f.FlightID
 where f.OriginAirportID=C.HomeTownID
 ORDER BY C.CustomerID asc
 
 --7
    SELECT distinct C.CustomerID, CONCAT(C.FirstName, ' ', C.LastName) as CustomerName, DATEDIFF(YEAR, C.DateOfBirth, '2016') AS Age
   FROM Customers as C
   INNER JOIN Tickets as T
   ON C.CustomerID = T.CustomerID
   INNER JOIN Flights as F
   ON T.FlightID = F.FlightID
   and f.Status = 'Departing'
   ORDER BY DATEDIFF(YEAR, C.DateOfBirth, GETDATE()) asc, C.CustomerID asc
   
   --8
      SELECT top 3 c.CustomerID, CONCAT(C.FirstName, ' ', C.LastName) as CustomerName, MAX(T.Price) as 'TicketPrice', a.AirportName as Destination 
   FROM Customers as C
   INNER JOIN Tickets as T
   on C.CustomerID = T.CustomerID
   INNER JOIN Flights as F
   ON T.FlightID=F.FlightID
   INNER JOIN Airports as a
   ON F.DestinationAirportID = a.AirportId
   where F.Status like 'Delayed'
   GROUP by  c.CustomerID, CONCAT(C.FirstName, ' ', C.LastName), a.AirportName 
   order by TicketPrice desc, C.CustomerId asc 
   
   --9
 select top 5 f.FlightID, f.DepartureTime, f.ArrivalTime, a.AirportName as Origin, ar.AirportName as Destination
from flights as f
inner join Airports as a
on f.OriginAirportID=a.AirportID
inner join Airports as ar
on f.DestinationAirportID=ar.AirportID
where f.Status like 'Departing' 
order by f.departureTime asc, f.flightId asc
   
   
   --10
   SELECT C.CustomerID, CONCAT(C.FirstName, ' ', C.LastName) as CustomerName, DATEDIFF(YEAR, C.DateOfBirth, '2016') AS Age  
  FROM Customers as C
  INNER JOIN Tickets as T
  ON T.CustomerID = C.CustomerID
  INNER JOIN Flights as F
  on T.FlightID=F.FlightID
  WHERE F.Status like 'Arrived'
  and DATEDIFF(YEAR, C.DateOfBirth, '2016')<21
  order by DATEDIFF(YEAR, C.DateOfBirth, '2016') desc, C.CustomerId asc
   
   --11
   	SELECT a.AirportID, a.AirportName, Count(c.CustomerID) FROM Airports as a
	inner join Flights as f
	on f.OriginAirportID=a.AirportID
	inner join Tickets as ti
	on ti.FlightID=f.FlightID
	inner join Customers as c
	on c.CustomerID=ti.CustomerID
	where f.Status = 'Departing'
	group by a.AirportID, a.AirportName
	having COUNT(c.CustomerID) >0
	order by a.AirportID
	
--Section 4: Programmability
--1
	CREATE PROCEDURE usp_SubmitReview(@CustomerID INT, @ReviewContent varchar(255), @ReviewGrade INT, @AirlineName varchar(255))
AS
BEGIN
	DECLARE @ID AS INT
	DECLARE @RevCont as VARCHAR(255)
	DECLARE @RevGrade as INT
	--DECLARE @AirlnName as VARCHAR(255) 
	DECLARE @AirId INT = (SELECT  AirlineID FROM [dbo].[Airlines] where AirlineName=@AirlineName)

	set @ID= ((SELECT top 1 AirlineID FROM [dbo].[Airlines] where AirlineName=@AirlineName order by AirlineID desc) +1)
	set @RevCont=@ReviewContent
	set @RevGrade=@ReviewGrade

	begin tran
		INSERT INTO [dbo].[CustomerReviews](CustomerID,ReviewContent,ReviewGrade,AirlineID)
		VALUES(@ID,@RevCont,@RevGrade,@AirId)

		IF (@AirId is null)
			begin
			   ROLLBACK
			   RAISERROR('Airline does not exist.', 16,1)
			   RETURN
			end
		ELSE
			BEGIN
				commit
			END
END


--2
CREATE PROCEDURE usp_PurchaseTicket(@CustomerID AS INT,@FlightID AS INT,@TicketPriceAS DECIMAL(10,2),@Class AS VARCHAR(MAX),@Seat AS VARCHAR(MAX))
AS
BEGIN
 IF(@TicketPriceAS >(select CBA.Balance
   from [CustomerBankAccounts] as CBA
   where CBA.CustomerID=@CustomerID))
		begin
		rollback
		raiserror('Insufficient bank account balance for ticket purchase.',16,1)
		end
else
	begin
		INSERT INTO Tickets
		(TicketID, Price, Class, Seat, CustomerID, FlightID)
		VALUES((select top 1 (T.TicketId + 1) from Tickets as T
		inner join [dbo].[CustomerBankAccounts]	as CBA
		on T.CustomerID=CBA.CustomerID
		order by T.TicketID desc), @TicketPriceAS, @Class, @Seat, @CustomerID, @FlightID)
		--commit
		UPDATE [dbo].[CustomerBankAccounts]
		set [dbo].[CustomerBankAccounts].Balance = [dbo].[CustomerBankAccounts].Balance - @TicketPriceAS
		where [dbo].[CustomerBankAccounts].CustomerID = @CustomerID  
		--commit
	end
END
